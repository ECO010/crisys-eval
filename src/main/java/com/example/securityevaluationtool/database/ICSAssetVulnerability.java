package com.example.securityevaluationtool.database;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class ICSAssetVulnerability {
    private int icsadID;
    private int releaseYear;
    private String icsCertNumber;
    private String icsCertAdvisoryTitle;
    private String vendor;
    private String product;
    private String productsAffected;
    private String cveNumber;
    private Double cumulativeCVSS;
    private String cvssSeverity;
    private String cweNumber;
    private String criticalInfrastructureSector;
    private String assetType;

    public int getIcsadID() {
        return icsadID;
    }

    public void setIcsadID(int icsadID) {
        this.icsadID = icsadID;
    }

    public int getReleaseYear() {
        return releaseYear;
    }

    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }

    public String getIcsCertNumber() {
        return icsCertNumber;
    }

    public void setIcsCertNumber(String icsCertNumber) {
        this.icsCertNumber = icsCertNumber;
    }

    public String getIcsCertAdvisoryTitle() {
        return icsCertAdvisoryTitle;
    }

    public void setIcsCertAdvisoryTitle(String icsCertAdvisoryTitle) {
        this.icsCertAdvisoryTitle = icsCertAdvisoryTitle;
    }

    public String getVendor() {
        return vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    public String getProduct() {
        return product;
    }

    public void setProduct(String product) {
        this.product = product;
    }

    public String getProductsAffected() {
        return productsAffected;
    }

    public void setProductsAffected(String productsAffected) {
        this.productsAffected = productsAffected;
    }

    public String getCveNumber() {
        return cveNumber;
    }

    public void setCveNumber(String cveNumber) {
        this.cveNumber = cveNumber;
    }

    public Double getCumulativeCVSS() {
        return cumulativeCVSS;
    }

    public void setCumulativeCVSS(Double cumulativeCVSS) {
        this.cumulativeCVSS = cumulativeCVSS;
    }

    public String getCvssSeverity() {
        return cvssSeverity;
    }

    public void setCvssSeverity(String cvssSeverity) {
        this.cvssSeverity = cvssSeverity;
    }

    public String getCweNumber() {
        return cweNumber;
    }

    public void setCweNumber(String cweNumber) {
        this.cweNumber = cweNumber;
    }

    public String getCriticalInfrastructureSector() {
        return criticalInfrastructureSector;
    }

    public void setCriticalInfrastructureSector(String criticalInfrastructureSector) {
        this.criticalInfrastructureSector = criticalInfrastructureSector;
    }

    public String getAssetType() {
        return assetType;
    }

    public void setAssetType(String assetType) {
        this.assetType = assetType;
    }


    private List<ICSAssetVulnerability> parseCSVDataFromGitHub() throws IOException {
        List<ICSAssetVulnerability> icsAssetVulnerabilitiesToSave = new ArrayList<>();

        StringBuilder csvData = new StringBuilder();
        String gitHubCSVUrl = "https://raw.githubusercontent.com/icsadvprj/ICS-Advisory-Project/337231d0834a3aa8b935471024adbcca27b5f595/ICS-CERT_ADV/CISA_ICS_ADV_Master.csv";
        URL url = new URL(gitHubCSVUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                csvData.append(line).append("\n");
            }
        } finally {
            connection.disconnect();
        }
        String csvDataToString = csvData.toString();

        // Parse CSV data using Apache Commons CSV
        try (CSVParser parser = CSVParser.parse(csvDataToString, CSVFormat.DEFAULT.withHeader())) {
            for (CSVRecord record : parser) {
                // Process each CSV record
                ICSAssetVulnerability assetVulnerability = new ICSAssetVulnerability();

                assetVulnerability.setIcsadID(Integer.parseInt(record.get("icsad_ID")));
                assetVulnerability.setReleaseYear(Integer.parseInt(record.get("Year")));
                assetVulnerability.setCriticalInfrastructureSector(record.get("Critical_Infrastructure_Sector"));
                assetVulnerability.setCvssSeverity(record.get("CVSS_Severity"));
                assetVulnerability.setIcsCertAdvisoryTitle(record.get("ICS-CERT_Advisory_Title"));

                // Making them 0.0 then inserting them as NULL later
                assetVulnerability.setCumulativeCVSS(Double.parseDouble(record.get("Cumulative_CVSS").contains("Not") ? "0.0" : record.get("Cumulative_CVSS")));

                assetVulnerability.setCveNumber(record.get("CVE_Number"));
                assetVulnerability.setCweNumber(record.get("CWE_Number"));
                assetVulnerability.setIcsCertNumber(record.get("ICS-CERT_Number"));
                assetVulnerability.setProduct(record.get("Product"));
                assetVulnerability.setProductsAffected(record.get("Products_Affected"));
                assetVulnerability.setVendor(record.get("Vendor"));

                icsAssetVulnerabilitiesToSave.add(assetVulnerability);
            }
        }
        return icsAssetVulnerabilitiesToSave;
    }

    private List<ICSAssetVulnerability> parseAssetTypeDataFromCSV() {

        List<ICSAssetVulnerability> icsAssetTypeVulToSave = new ArrayList<>();

        String csvFilePath = "your file path here";

        try (Reader reader = new FileReader(csvFilePath);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withHeader())) {

            for (CSVRecord csvRecord : csvParser) {
                ICSAssetVulnerability icsAssetVulnerability = new ICSAssetVulnerability();

                String alertCode = csvRecord.get("Alert Code");
                String assetType = csvRecord.get("Asset Type");

                icsAssetVulnerability.setIcsCertNumber(alertCode);
                icsAssetVulnerability.setAssetType(assetType);

                icsAssetTypeVulToSave.add(icsAssetVulnerability);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return icsAssetTypeVulToSave;
    }

    public static void main(String[] args) {
        ICSAssetVulnerability icsAssetVulnerability = new ICSAssetVulnerability();
        ICSAssetVulnerabilityDAO icsAssetVulnerabilityDAO = new ICSAssetVulnerabilityDAO();
        List <ICSAssetVulnerability> icsAssetVulnerabilitiesToSave = new ArrayList<>();
        List <ICSAssetVulnerability> icsAssetVulnerabilitiesWithAssetTypes = icsAssetVulnerability.parseAssetTypeDataFromCSV();

        try {
            icsAssetVulnerabilitiesToSave = icsAssetVulnerability.parseCSVDataFromGitHub();
        } catch (IOException e) {
            e.printStackTrace();
        }

        icsAssetVulnerabilityDAO.saveIcsAssetVulnerabilities(icsAssetVulnerabilitiesToSave);
        icsAssetVulnerabilityDAO.saveIcsAssetTypes(icsAssetVulnerabilitiesWithAssetTypes);
    }
}

