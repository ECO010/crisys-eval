package com.example.securityevaluationtool.database;

import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public class ICSAssetVulnerabilityDAO {
    private static final String INSERT_ICS_ASSET_VULNERABILITIES = "INSERT OR IGNORE INTO ICSAssetVulnerability (ICSAID, Year, CVENumber, CWENumber, InfrastructureSector, CVSSSeverity," +
            "CumulativeCVSS, ICSCertAdvisoryTitle, ICSCertNumber, Product, ProductsAffected, Vendor) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    private static final String INSERT_ASSET_TYPE = "INSERT OR IGNORE INTO AssetTypeVulConnection (ICSCertNumber, AssetType) VALUES (?, ?)";

    private static final String GET_DATA_FROM_DB = "SELECT ICSAID, Year, CVENumber, CWENumber, InfrastructureSector, CVSSSeverity, \n" +
            "       CumulativeCVSS, ICSCertAdvisoryTitle, ICSCertNumber, Product, AssetType, Vendor\n" +
            "FROM ICSAssetVulnerability \n";

    private static final String YEAR_FROM_ICSASSET_VULNERABILITY = "SELECT DISTINCT Year FROM ICSAssetVulnerability ORDER BY Year DESC";
    private static final String SEVERITY_FROM_ICSASSET_VULNERABILITY = "SELECT DISTINCT CVSSSeverity FROM ICSAssetVulnerability";
    private static final String VENDOR_FROM_ICSASSET_VULNERABILITY = "SELECT DISTINCT Vendor FROM ICSAssetVulnerability ORDER BY Vendor";
    private static final String GET_ASSET_TYPES = "SELECT AssetType FROM ICSAssetTypeFromCisa";
    private static final String GET_CWE_NUMBERS = "SELECT CWENumber FROM ICSAssetVulnerability WHERE AssetType = ? AND Year BETWEEN ? AND ?";
    private static final String GET_CWE_FROM_STRINGS = "SELECT * FROM CommonWeaknessEnumeration WHERE CweId = ?";
    private static final String GET_MIN_YEAR = "SELECT MIN (Year) FROM ICSAssetVulnerability";

    // Weird concatenation syntax because of SQLite
    // Making sure the like fetches exact match (i.e CWE-100, and not CWE-100x..)
    private static final String GET_AVERAGE_CVSS =  "SELECT AVG(CumulativeCVSS)\n" +
                                                    "FROM ICSAssetVulnerability\n" +
                                                    "WHERE ', ' || CWENumber || ',' LIKE '%' || ? || '%'\n" +
                                                    "AND Year BETWEEN ? AND ?";

    public void saveIcsAssetVulnerabilities(List<ICSAssetVulnerability> assetVulnerabilities) {
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ICS_ASSET_VULNERABILITIES)) {

            for (ICSAssetVulnerability assetVulnerability : assetVulnerabilities) {

                preparedStatement.setInt(1, assetVulnerability.getIcsadID());
                preparedStatement.setInt(2, assetVulnerability.getReleaseYear());
                preparedStatement.setString(3, assetVulnerability.getCveNumber());
                preparedStatement.setString(4, assetVulnerability.getCweNumber());
                preparedStatement.setString(5, assetVulnerability.getCriticalInfrastructureSector());
                preparedStatement.setString(6, assetVulnerability.getCvssSeverity());

                // Inserting Cumulative CVSS as NULL if it's 0.0
                preparedStatement.setObject(7, assetVulnerability.getCumulativeCVSS() == 0.0 ? null : assetVulnerability.getCumulativeCVSS(), java.sql.Types.DOUBLE);

                preparedStatement.setString(8, assetVulnerability.getIcsCertAdvisoryTitle());
                preparedStatement.setString(9, assetVulnerability.getIcsCertNumber());
                preparedStatement.setString(10, assetVulnerability.getProduct());
                preparedStatement.setString(11, assetVulnerability.getProductsAffected());
                preparedStatement.setString(12, assetVulnerability.getVendor());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
    }

    public void saveIcsAssetTypes(List<ICSAssetVulnerability> assetVulnerabilities) {
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ASSET_TYPE)) {

            for (ICSAssetVulnerability assetVulnerability : assetVulnerabilities) {

                preparedStatement.setString(1, assetVulnerability.getIcsCertNumber());
                preparedStatement.setString(2, assetVulnerability.getAssetType());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
    }

    public List<ICSAssetVulnerability> getICSVulDataFromDB() {
        List<ICSAssetVulnerability> icsVulnerabilities = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_DATA_FROM_DB)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            // Retrieve the CAPEC IDs and add them to the list
            while (resultSet.next()) {
                ICSAssetVulnerability icsAssetVulnerability = new ICSAssetVulnerability();

                icsAssetVulnerability.setAssetType(resultSet.getString("assetType"));
                icsAssetVulnerability.setIcsCertNumber(resultSet.getString("ICSCertNumber"));
                icsAssetVulnerability.setVendor(resultSet.getString("Vendor"));
                icsAssetVulnerability.setProduct(resultSet.getString("Product"));
                icsAssetVulnerability.setCweNumber(resultSet.getString("CWENumber"));
                icsAssetVulnerability.setCveNumber(resultSet.getString("CVENumber"));
                icsAssetVulnerability.setCriticalInfrastructureSector(resultSet.getString("InfrastructureSector"));
                Double cumulativeCVSS = resultSet.getDouble("CumulativeCVSS");
                icsAssetVulnerability.setCumulativeCVSS(cumulativeCVSS != 0.0 ? cumulativeCVSS : null);
                icsAssetVulnerability.setCvssSeverity(resultSet.getString("CVSSSeverity"));
                icsAssetVulnerability.setIcsCertAdvisoryTitle(resultSet.getString("ICSCertAdvisoryTitle"));
                icsAssetVulnerability.setReleaseYear(resultSet.getInt("Year"));
                icsAssetVulnerability.setIcsadID(resultSet.getInt("ICSAID"));

                icsVulnerabilities.add(icsAssetVulnerability);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return icsVulnerabilities;
    }

    public List<Integer> getDistinctYear() {
        List<Integer> distinctYearList = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(YEAR_FROM_ICSASSET_VULNERABILITY)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                Integer year = resultSet.getInt("Year");
                distinctYearList.add(year);
            }

        } catch (SQLException e) {
        e.printStackTrace();
        // Handle exceptions as needed
        }
        return distinctYearList;
    }

    public List<String> getDistinctCweIdsBasedOnYearAndAssetType(String assetType, int yearFrom, int yearTo) {
        List<String> distinctCweList = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_CWE_NUMBERS)) {

            preparedStatement.setString(1, assetType);
            preparedStatement.setInt(2, yearFrom);
            preparedStatement.setInt(3, yearTo);

            ResultSet resultSet = preparedStatement.executeQuery();

            // Accumulate all CWE numbers into a single string
            StringBuilder cweNumbersBuilder = new StringBuilder();
            while (resultSet.next()) {
                cweNumbersBuilder.append(resultSet.getString("CWENumber")).append("\n");
            }

            // Split the column data by newline character
            String cweNumbers = cweNumbersBuilder.toString();
            String[] lines = cweNumbers.split("\n");

            // Set to store distinct CWE numbers
            Set<String> distinctCwes = new HashSet<>();

            // Loop through each line
            for (String line : lines) {
                // Split the line by comma to get individual CWE numbers
                String[] cwes = line.split(", ");
                // Add each CWE number to the set after trimming whitespace
                for (String cwe : cwes) {
                    distinctCwes.add(cwe.trim());
                }
            }

            // Add distinct CWE numbers to the list
            distinctCweList.addAll(distinctCwes);

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return distinctCweList;
    }

    public List<CommonWeaknessEnumeration> getCweFromStrings(List<String> distinctCwes) {
        List<CommonWeaknessEnumeration> weaknessEnumerations = new ArrayList<>();
        WeaknessMitigationDAO weaknessMitigationDAO = new WeaknessMitigationDAO();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_CWE_FROM_STRINGS)) {

            for (String distinctCwe : distinctCwes) {
                preparedStatement.setString(1, distinctCwe);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        CommonWeaknessEnumeration weaknessEnumeration = new CommonWeaknessEnumeration();
                        weaknessEnumeration.setDescription(resultSet.getString("Description"));
                        weaknessEnumeration.setName(resultSet.getString("Name"));
                        weaknessEnumeration.setCweId(resultSet.getString("CweId"));
                        weaknessEnumeration.setLikelihoodOfExploit(resultSet.getString("LikelihoodOfExploit"));
                        weaknessEnumeration.setWeaknessMitigations(weaknessMitigationDAO.getMitigationsForWeakness(distinctCwe));
                        weaknessEnumerations.add(weaknessEnumeration);
                    }
                }
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return weaknessEnumerations;
    }

    public List<String> getDistinctSeverity() {
        List<String> severityList = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(SEVERITY_FROM_ICSASSET_VULNERABILITY)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String cvssSeverity = resultSet.getString("CVSSSeverity");
                severityList.add(cvssSeverity);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return severityList;
    }

    public List<String> getDistinctVendor() {
        List<String> vendorList = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(VENDOR_FROM_ICSASSET_VULNERABILITY)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String vendor = resultSet.getString("Vendor");
                vendorList.add(vendor);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return vendorList;
    }

    public int getMinYearFromDB() {
        int minYear = 0;

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_MIN_YEAR)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                minYear = resultSet.getInt("MIN (Year)");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return minYear;
    }

    public List<String> getAssetTypes() {
        List<String> assetTypes = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_ASSET_TYPES)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String assetType = resultSet.getString("AssetType");
                assetTypes.add(assetType);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return assetTypes;
    }

    public Double getAverageCVSSForCWE (String cweId, int yearFrom, int yearTo) {
        Double averageCVSS = 0.0;
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_AVERAGE_CVSS)) {

            preparedStatement.setString(1, cweId);
            preparedStatement.setInt(2, yearFrom);
            preparedStatement.setInt(3, yearTo);

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                averageCVSS = resultSet.getDouble("AVG(CumulativeCVSS)");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return averageCVSS;
    }

    public List<ICSAssetVulnerability> getFilteredData(String query, Integer year, String cvssSeverity, String assetType, String vendor) {
        List<ICSAssetVulnerability> icsVulnerabilities = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {

            // Set parameters in the prepared statement based on their positions
            int parameterIndex = 1; // Start with index 1

            if (year != null) {
                preparedStatement.setInt(parameterIndex++, year);
            }

            if (cvssSeverity != null) {
                preparedStatement.setString(parameterIndex++, cvssSeverity);
            }

            if (assetType != null) {
                preparedStatement.setString(parameterIndex++, assetType);
            }

            if (vendor != null) {
                preparedStatement.setString(parameterIndex++, vendor);
            }

            System.out.println(preparedStatement);

            System.out.println(year);
            System.out.println(cvssSeverity);
            System.out.println(assetType);
            System.out.println(vendor);

            // Execute the query
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                // Iterate through the result set and populate the list
                // Retrieve the CAPEC IDs and add them to the list
                while (resultSet.next()) {
                    ICSAssetVulnerability icsAssetVulnerability = new ICSAssetVulnerability();

                    icsAssetVulnerability.setAssetType(resultSet.getString("assetType"));
                    icsAssetVulnerability.setIcsCertNumber(resultSet.getString("ICSCertNumber"));
                    icsAssetVulnerability.setVendor(resultSet.getString("Vendor"));
                    icsAssetVulnerability.setProduct(resultSet.getString("Product"));
                    icsAssetVulnerability.setCweNumber(resultSet.getString("CWENumber"));
                    icsAssetVulnerability.setCveNumber(resultSet.getString("CVENumber"));
                    icsAssetVulnerability.setCriticalInfrastructureSector(resultSet.getString("InfrastructureSector"));
                    Double cumulativeCVSS = resultSet.getDouble("CumulativeCVSS");
                    icsAssetVulnerability.setCumulativeCVSS(cumulativeCVSS != 0.0 ? cumulativeCVSS : null);
                    icsAssetVulnerability.setCvssSeverity(resultSet.getString("CVSSSeverity"));
                    icsAssetVulnerability.setIcsCertAdvisoryTitle(resultSet.getString("ICSCertAdvisoryTitle"));
                    icsAssetVulnerability.setReleaseYear(resultSet.getInt("Year"));
                    icsAssetVulnerability.setIcsadID(resultSet.getInt("ICSAID"));

                    icsVulnerabilities.add(icsAssetVulnerability);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return icsVulnerabilities;
    }

    public Double getTotalEPSSForLinkedCVEs(List<String> cveList) {
        // Enclose each string value in single quotes and join them with commas
        String cveValues = cveList.stream()
                .map(cve -> "'" + cve + "'")
                .collect(Collectors.joining(","));

        // Construct the SQL query with the string values enclosed in single quotes
        String sql = "SELECT SUM(Epss) AS TotalEpss FROM Epss WHERE CveNumber IN (" + cveValues + ")";

        Double epssScore = 0.0;
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                epssScore = resultSet.getDouble("TotalEpss");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return epssScore;
    }
}
