package com.example.securityevaluationtool.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

public class ICSAssetVulnerabilityDAO {
    private static final String INSERT_ICS_ASSET_VULNERABILITIES = "INSERT OR IGNORE INTO ICSAssetVulnerability (ICSAID, Year, CVENumber, CWENumber, InfrastructureSector, CVSSSeverity," +
            "CumulativeCVSS, ICSCertAdvisoryTitle, ICSCertNumber, Product, ProductsAffected, Vendor) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    private static final String INSERT_ASSET_TYPE = "INSERT OR IGNORE INTO AssetTypeVulConnection (ICSCertNumber, AssetType) VALUES (?, ?)";

    public void saveIcsAssetVulnerabilities(List<ICSAssetVulnerability> assetVulnerabilities) {
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ICS_ASSET_VULNERABILITIES)) {

            for (ICSAssetVulnerability assetVulnerability : assetVulnerabilities) {

                preparedStatement.setInt(1, assetVulnerability.getIcsadID());
                preparedStatement.setInt(2, assetVulnerability.getReleaseYear());
                preparedStatement.setString(3, assetVulnerability.getCveNumber());
                preparedStatement.setString(4, assetVulnerability.getCweNumber());
                preparedStatement.setString(5, assetVulnerability.getCriticalInfrastructureSector());
                preparedStatement.setString(6, assetVulnerability.getCvssSeverity());

                // Inserting Cumulative CVSS as NULL if it's 0.0
                preparedStatement.setObject(7, assetVulnerability.getCumulativeCVSS() == 0.0 ? null : assetVulnerability.getCumulativeCVSS(), java.sql.Types.DOUBLE);

                preparedStatement.setString(8, assetVulnerability.getIcsCertAdvisoryTitle());
                preparedStatement.setString(9, assetVulnerability.getIcsCertNumber());
                preparedStatement.setString(10, assetVulnerability.getProduct());
                preparedStatement.setString(11, assetVulnerability.getProductsAffected());
                preparedStatement.setString(12, assetVulnerability.getVendor());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
    }

    public void saveIcsAssetTypes(List<ICSAssetVulnerability> assetVulnerabilities) {
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ASSET_TYPE)) {

            for (ICSAssetVulnerability assetVulnerability : assetVulnerabilities) {

                preparedStatement.setString(1, assetVulnerability.getIcsCertNumber());
                preparedStatement.setString(2, assetVulnerability.getAssetType());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
    }
}
