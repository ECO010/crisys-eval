package com.example.securityevaluationtool.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class ICSAssetVulnerabilityDAO {
    private static final String INSERT_ICS_ASSET_VULNERABILITIES = "INSERT OR IGNORE INTO ICSAssetVulnerability (ICSAID, Year, CVENumber, CWENumber, InfrastructureSector, CVSSSeverity," +
            "CumulativeCVSS, ICSCertAdvisoryTitle, ICSCertNumber, Product, ProductsAffected, Vendor) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    private static final String INSERT_ASSET_TYPE = "INSERT OR IGNORE INTO AssetTypeVulConnection (ICSCertNumber, AssetType) VALUES (?, ?)";

    private static final String GET_DATA_FROM_DB = "SELECT ICSAID, Year, CVENumber, CWENumber, InfrastructureSector, CVSSSeverity, \n" +
            "       CumulativeCVSS, ICSCertAdvisoryTitle, ICSCertNumber, Product, AssetType, Vendor\n" +
            "FROM ICSAssetVulnerability \n";

    private static final String YEAR_FROM_ICSASSET_VULNERABILITY = "SELECT DISTINCT Year FROM ICSAssetVulnerability";
    private static final String SEVERITY_FROM_ICSASSET_VULNERABILITY = "SELECT DISTINCT CVSSSeverity FROM ICSAssetVulnerability";
    private static final String GET_ASSET_TYPES = "SELECT AssetType FROM ICSAssetFromCisa";

    public void saveIcsAssetVulnerabilities(List<ICSAssetVulnerability> assetVulnerabilities) {
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ICS_ASSET_VULNERABILITIES)) {

            for (ICSAssetVulnerability assetVulnerability : assetVulnerabilities) {

                preparedStatement.setInt(1, assetVulnerability.getIcsadID());
                preparedStatement.setInt(2, assetVulnerability.getReleaseYear());
                preparedStatement.setString(3, assetVulnerability.getCveNumber());
                preparedStatement.setString(4, assetVulnerability.getCweNumber());
                preparedStatement.setString(5, assetVulnerability.getCriticalInfrastructureSector());
                preparedStatement.setString(6, assetVulnerability.getCvssSeverity());

                // Inserting Cumulative CVSS as NULL if it's 0.0
                preparedStatement.setObject(7, assetVulnerability.getCumulativeCVSS() == 0.0 ? null : assetVulnerability.getCumulativeCVSS(), java.sql.Types.DOUBLE);

                preparedStatement.setString(8, assetVulnerability.getIcsCertAdvisoryTitle());
                preparedStatement.setString(9, assetVulnerability.getIcsCertNumber());
                preparedStatement.setString(10, assetVulnerability.getProduct());
                preparedStatement.setString(11, assetVulnerability.getProductsAffected());
                preparedStatement.setString(12, assetVulnerability.getVendor());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
    }

    public void saveIcsAssetTypes(List<ICSAssetVulnerability> assetVulnerabilities) {
        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ASSET_TYPE)) {

            for (ICSAssetVulnerability assetVulnerability : assetVulnerabilities) {

                preparedStatement.setString(1, assetVulnerability.getIcsCertNumber());
                preparedStatement.setString(2, assetVulnerability.getAssetType());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
    }

    public List<ICSAssetVulnerability> getICSVulDataFromDB() {
        List<ICSAssetVulnerability> icsVulnerabilities = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_DATA_FROM_DB)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            // Retrieve the CAPEC IDs and add them to the list
            while (resultSet.next()) {
                ICSAssetVulnerability icsAssetVulnerability = new ICSAssetVulnerability();

                icsAssetVulnerability.setAssetType(resultSet.getString("assetType"));
                icsAssetVulnerability.setIcsCertNumber(resultSet.getString("ICSCertNumber"));
                icsAssetVulnerability.setVendor(resultSet.getString("Vendor"));
                icsAssetVulnerability.setProduct(resultSet.getString("Product"));
                icsAssetVulnerability.setCweNumber(resultSet.getString("CWENumber"));
                icsAssetVulnerability.setCveNumber(resultSet.getString("CVENumber"));
                icsAssetVulnerability.setCriticalInfrastructureSector(resultSet.getString("InfrastructureSector"));
                Double cumulativeCVSS = resultSet.getDouble("CumulativeCVSS");
                icsAssetVulnerability.setCumulativeCVSS(cumulativeCVSS != 0.0 ? cumulativeCVSS : null);
                icsAssetVulnerability.setCvssSeverity(resultSet.getString("CVSSSeverity"));
                icsAssetVulnerability.setIcsCertAdvisoryTitle(resultSet.getString("ICSCertAdvisoryTitle"));
                icsAssetVulnerability.setReleaseYear(resultSet.getInt("Year"));
                icsAssetVulnerability.setIcsadID(resultSet.getInt("ICSAID"));

                icsVulnerabilities.add(icsAssetVulnerability);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return icsVulnerabilities;
    }

    public List<Integer> getDistinctYear() {
        List<Integer> distinctYearList = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(YEAR_FROM_ICSASSET_VULNERABILITY)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                Integer year = resultSet.getInt("Year");
                distinctYearList.add(year);
            }

        } catch (SQLException e) {
        e.printStackTrace();
        // Handle exceptions as needed
        }
        return distinctYearList;
    }

    public List<String> getDistinctSeverity() {
        List<String> severityList = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(SEVERITY_FROM_ICSASSET_VULNERABILITY)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String cvssSeverity = resultSet.getString("CVSSSeverity");
                severityList.add(cvssSeverity);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return severityList;
    }

    public List<String> getAssetTypes() {
        List<String> assetTypes = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_ASSET_TYPES)) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String assetType = resultSet.getString("AssetType");
                assetTypes.add(assetType);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return assetTypes;
    }


    //TODO: find out why filtering with 2 string columns breaks the table
    public List<ICSAssetVulnerability> getFilteredData(String query, Integer year, String cvssSeverity, String assetType ) {
        List<ICSAssetVulnerability> icsVulnerabilities = new ArrayList<>();

        try (Connection connection = DatabaseConnector.connect();
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {

            // Set parameters in the prepared statement based on their positions
            int parameterIndex = 1; // Start with index 1

            if (year != null) {
                preparedStatement.setInt(parameterIndex++, year);
            }
            if (assetType != null) {
                preparedStatement.setString(parameterIndex++, assetType);
            }
            if (cvssSeverity != null) {
                preparedStatement.setString(parameterIndex++, cvssSeverity);
            }

            System.out.println(year);
            System.out.println(cvssSeverity);
            System.out.println(assetType);

            System.out.println(query);

            // Execute the query
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                // Iterate through the result set and populate the list
                // Retrieve the CAPEC IDs and add them to the list
                while (resultSet.next()) {
                    ICSAssetVulnerability icsAssetVulnerability = new ICSAssetVulnerability();

                    icsAssetVulnerability.setAssetType(resultSet.getString("assetType"));
                    icsAssetVulnerability.setIcsCertNumber(resultSet.getString("ICSCertNumber"));
                    icsAssetVulnerability.setVendor(resultSet.getString("Vendor"));
                    icsAssetVulnerability.setProduct(resultSet.getString("Product"));
                    icsAssetVulnerability.setCweNumber(resultSet.getString("CWENumber"));
                    icsAssetVulnerability.setCveNumber(resultSet.getString("CVENumber"));
                    icsAssetVulnerability.setCriticalInfrastructureSector(resultSet.getString("InfrastructureSector"));
                    Double cumulativeCVSS = resultSet.getDouble("CumulativeCVSS");
                    icsAssetVulnerability.setCumulativeCVSS(cumulativeCVSS != 0.0 ? cumulativeCVSS : null);
                    icsAssetVulnerability.setCvssSeverity(resultSet.getString("CVSSSeverity"));
                    icsAssetVulnerability.setIcsCertAdvisoryTitle(resultSet.getString("ICSCertAdvisoryTitle"));
                    icsAssetVulnerability.setReleaseYear(resultSet.getInt("Year"));
                    icsAssetVulnerability.setIcsadID(resultSet.getInt("ICSAID"));

                    icsVulnerabilities.add(icsAssetVulnerability);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }
        return icsVulnerabilities;
    }
}
